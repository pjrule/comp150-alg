<!doctype html>

<head>
  <title>Approximate Graph Coloring | Parker J. Rule</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style id="distill-article-specific-styles">
    <%=require("../static/styles.css") %>
  </style>
  <script src="https://distill.pub/template.v2.js"></script>
</head>

<body>

  <d-front-matter>
    <script type="text/json">
      <%= JSON.stringify(require("./frontmatter.json"), null, 4) %>
    </script>
  </d-front-matter>

  <d-title>
      <h1>Approximate Graph Coloring</h1>
      <p>Coloring a graph's vertices with a minimal number of colors is a classic NP-hard problem, but  there are many useful polynomial-time approximations.</p>
  </d-title>

  <d-article>
    <a class="marker" href="#section-1" id="section-1"><span>1</span></a>
    <h2>Motivation</h2>
    <h3>What is vertex coloring?</h3>
    <p>A graph is <d-math>k</d-math>-colorable if each of its vertices can be assigned a color, chosen from at most <d-math>k</d-math> unique colors, such that no two vertices connected directly by an edge share the same color. The <em>chromatic number</em> of a graph is the minimum possible <d-math>k</d-math> for which a valid coloring is possible.</p>
    <figure class="l-body-outset">
        <div style="width:20%; display: inline-block"></div>
        <div style="width:30%; display: inline-block">
            <%= require("../static/diagrams/complete_7.svg") %>
        </div>
        <div style="width:30%; display: inline-block">
            <%= require("../static/diagrams/tree_7.svg") %>
        </div>
    </figure>
    <figcaption style="margin-left: auto; margin-right: auto; margin-bottom: 1em">A complete graph with 7 nodes (left) requires 7 colors; a tree with 7 nodes (right) requires only 2 colors.</figcaption>

    <p>Determining the chromatic number of an arbitrary graph is one of Karp's 21 NP-complete problems; a polynomial-time algorithm would imply <strong>P</strong> = <strong>NP</strong>, which is considered unlikely.<d-cite key="karp"></d-cite></p>

    <p>Besides its fundamental theoretical importance, minimum vertex coloring has numerous practical applications. In the <em>examination scheduling problem</em>, exams at a university must be scheduled such the number of exam periods is minimized and no student has two exams at once. This can be modeled as a vertex coloring problem: represent each course as a vertex, and add edges between courses that share students. A vertex coloring of this graph maps each course to an exam period; if two courses share students, they must have a different color and therefore must have examinations at different times.<d-cite key="leighton"></d-cite> Vertex coloring also arises in the study of compilers, where it is used to model the register allocation problem.<d-cite key="chaitin"></d-cite></p>

    <h3>Easier problems</h3>
    <p>There are many bounds, approximation algorithms, and heuristics for vertex coloring. All planar graphs have a chromatic number of at most 4 and can be 5-colored in polynomial time. Nontrivial trees and bipartite graphs have a chromatic number of 2 and can be easily colored; cycles have a chromatic number of at most 3 and are also easy to color. More generally, it is well-known that <d-math>\chi(G) \leq \Delta(G) + 1</d-math>, where <d-math>\chi(G)</d-math> is the chromatic number of a graph <d-math>G</d-math> and <d-math>\Delta(G)</d-math> is the <em>maximum degree</em> of all the vertices of <d-math>G</d-math>. Such a coloring can be attained in polynomial time.<d-cite key="aloupis"></d-cite></p>

    <p>In this project, we investigate approximate vertex coloring algorithms for graphs where there is a large gap between the trivial <d-math>\Delta(G) + 1</d-math>-coloring and the best attainable coloring. We focus specifically on 3-colorable graphs with high maximum degree. We investigate heuristics for vertex coloring, show where they fail, and describe Wigderson's vertex coloring algorithm for 3-colorable graphs that offers provably better worst-case performance than prior-known heuristics. We conclude with a survey of improvements made since the publication of Wigderson's 1983 paper.</p>
    <figure class="l-body-outset">
        <div style="width: 31%; display: inline-block"></div>
        <div style="width:35%; display: inline-block">
            <%= require("../static/diagrams/tree_high_max_deg.svg") %>
        </div>
    </figure>
    <figcaption style="margin-left: auto; margin-right: auto; margin-bottom: 1em">A 2-colorable graph with a maximum degree of 29.</figcaption>


    <a class="marker" href="#section-3" id="section-3"><span>3</span></a>
    <h2>Heuristics</h2>
    <h3>Randomly ordered greedy coloring</h3>
    <p>Perhaps the simplest graph coloring heuristic is the following: choose an uncolored vertex at random and assign it a color not used by its neighbors, introducing a new color if the vertex's neighbors are using all previously available colors. Repeat this operation until all vertices are colored.</p>

    <h3>Largest-degree-first coloring</h3>

    <h3>Brélaz's algorithm (DSatur)</h3>
    <p>Brélaz's widely used degree saturation (DSatur) algorithm often performs better than random coloring.<d-footnote>The original Brélaz paper does not provide comprehensive benchmarks against the random coloring algorithm; instead, benchmarks against other heuristics, which were presumably all invented as improvements over naive greedy coloring, are provided. Some cursory benchmarking on small Erdős–Rényi random graphs suggests that Brélaz's algorithm almost always performs better than random coloring.</d-footnote>A vertex's <em>degree saturation</em> is the number of unique colors used by its neighbors.<d-cite key="brelaz"></d-cite></p>

    <h3>Worst-case behavior</h3>
    <figure style="margin: 0 auto">
    <video width="600" height="200" autoplay loop>
      <source type="video/mp4" src="/diagrams/spinrad_10.mp4">
      Your browser does not support the video tag.
    </video>
    </figure>
    <figcaption style="margin: 1em auto">Spinrad and Vijayan construct a class of 3-colorable graphs that Brélaz's algorithm may color with <d-math>O(n)</d-math> colors.<d-cite key="spinrad"></d-cite></figcaption>

    <p>While these heuristics are useful in practice, they yield no worst-case asymptotic improvement over simply assigning each vertex its own color. Johnson constructs examples for random coloring and largest-degree-first coloring that use <d-math>O(n)</d-math> colors for a 3-colorable graph.<d-cite key="leighton,johnson-approx,johnson-worst-case"></d-cite> Brélaz's algorithm can fail similarly, as shown above.<d-cite key="spinrad"></d-cite> Garey and Johnson show that no polynomial-time vertex coloring algorithm exists with an approximation factor beter than 2.<d-cite key="garey"></d-cite></p>

    <a class="marker" href="#section-4" id="section-4"><span>4</span></a>
    <h2>Wigderson's 3-coloring approximation</h2>
    <p>Outline:</p>
    <ol>
        <li>1-2 paragraphs: Main concepts for Algorithm A of <d-cite key="wigderson"></d-cite>.</li>
        <li>2-4 paragraphs: detailed discussion of proof (with notes on runtime)</li>
        <li>1 paragraph: discussion of interactive</li>
        <li>Interactive: select from pre-selected 3-colorable graphs with high maximum degree and "very hard" 3-colorable graphs generated using techniques from <d-cite key="mizuno"></d-cite>. Show coloring process step by step.</li>
        <li>1-2 paragraphs: discussion of performance guarantees vs. real-life performance against heuristics</li>
    </ol>

    <a class="marker" href="#section-5" id="section-5"><span>5</span></a>
    <h2>Other algorithms</h2>
    <h3>Wigderson's <d-math>k</d-math>-coloring approximation</h3>
    <h3>Blum's approximation</h3>
    <h3>Semidefinite programming</h3>

    <a class="marker" href="#section-6" id="section-6"><span>6</span></a>
    <h2>Conclusion</h2>
  </d-article>

  <d-appendix>
    <d-footnote-list></d-footnote-list>
    <d-citation-list></d-citation-list>
  </d-appendix>

  <!-- bibliography will be inlined during Distill pipeline's pre-rendering -->
  <d-bibliography src="bibliography.bib"></d-bibliography>
</body>
